#summary Choosel Architecture Overview
#labels Developer,Featured

=Scope=

Choosel is built on top of [http://code.google.com/webtoolkit/ GWT] and the [http://code.google.com/appengine/ Google App Engine] (the backend can be modified to run on any servlet container). It is a *research prototype*. The current limitations are:

  * *Small number of data items* (up to several thousand rows with ~1000 visible items / visualization) - see [http://code.google.com/p/choosel/wiki/Performance performance testing results]. If larger data sets should be analyzed, the server part of Choosel can be extended to perform an initial automatic analysis or to sample the data.
  * *Exploration of static, read-only data*. Choosel assumes that the data does not change, and that it cannot be modified.
  * *Firefox 3.5+, Chrome 4+, and Safari 5+ are supported*. There are problems with the CSS rendering in Internet Explorer and older browser. Choosel also depends on fast !JavaScript engines.
  * *Designed for mouse interaction and full screen windows on larger monitors (1280x1024)*. Touch interaction (e.g. iPad) is different in that hovering (and thus highlighting and tooltips) is difficult, and occlusion is problematic. Also, multitouch interaction is not supported. Similarly, small screen devices (e.g. smartphones) are unsuitable for Choosel.

For more details on the design decisions, see the [http://lgrammel.blogspot.com/2010/09/why-choosel-is-based-on-gwt.html blog post on the design decisions (Why Choosel is based on GWT)].

=Architecture Overview=

http://choosel.googlecode.com/svn/wiki/choosel-architecture.png

The Choosel client is written in [http://code.google.com/webtoolkit/ GWT] and runs in the browser. The Choosel backend is written for the [http://code.google.com/appengine/ Google App engine], but it can be modified to run on any [http://www.oracle.com/technetwork/java/index-jsp-135475.html Java Servlet container].

The client-side framework facilitates the interaction with *visualization components*, which can be wrappers around third party components and toolkits such as the Simile Timeline, Protovis and !FlexViz. Choosel can integrate components developed using different technologies such as Flash and !JavaScript. 

Choosel provides several services such as view coordination and configuration, a desktop, undo/redo management, data management etc to make development of multi-view visualization environments easy.

=Visualization Component Architecture=

http://choosel.googlecode.com/svn/wiki/choosel-visualization_component_architecture-thumbnail.png

[VisualizationComponentArchitectureDiagram View high resolution diagram]

The Choosel visualization component architecture separates the core functionality required to use Choosel visualization in GWT from the workbench functionality. The visualizations are extracted into separate visualization modules. The visualization component architecture makes reusing and extending Choosel easier. It enables three ways to leverage Choosel in your own projects:

  * *Developing your own visualization components*: You can implement visualization components that adher the Choosel visualization component API. These visualization components can then be used by yourself or others while taking advantage of Choosel feature such as management of view synchronization, management of selections, and support for hovering and details on demand. 
  * *Using Choosel visualization components in GWT applications*: You can use one or several Choosel visualization components in your GWT application to visualize your data.
  * *Creating a Choosel-based workbench*: You can extend the whole Choosel framework to develop your own visualization workbench, for example for a specific application domain.     

_Please note that while the modularization itself is complete, the visualization component API is still under development. We plan to release a first stable version in the next few months._

=User Interface Elements=

http://choosel.googlecode.com/svn/wiki/choosel-ui-elements.png

  * [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/ui/ActionBar.java ActionBar source code]
  * [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/windows/Desktop.java Desktop Interface source code]
  * [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/windows/DefaultDesktop.java Desktop Implementation source code]
  * [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/windows/WindowPanel.java Window source code]

http://choosel.googlecode.com/svn/wiki/choosel-ui-window.png

  * [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/windows/WindowPanel.java Window source code]
  * [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/views/View.java View interface]
  * [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/views/DefaultView.java Default View implementation]
  * [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/views/ViewContentDisplay.java View Content Display interface]

=Data Representation=

The data is stored in [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/resources/Resource.java Resource]s, which are essentially key-value maps with an id. [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.core/src/org/thechiselgroup/choosel/core/client/resources/ResourceSet.java Resource Sets] combine several resources. There are multiple implementations of !ResourceSet, which are required for divserse purposes such as memory management.