#summary Protovis/GWT Component
#labels Developer,Component

=Overview=

Protovis/GWT ([http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.protovis/ Source Code], [http://web.uvic.ca/~lgrammel/blog/protovis-gwt/index.html Examples]) is a GWT wrapper for the open source [http://vis.stanford.edu/protovis/ Protovis JavaScript Visualization library]. It can be used to visualize data in [http://code.google.com/webtoolkit/ GWT] applications. Protovis/GWT is a stand-alone GWT module being developed as part of the Choosel Visual Data Exploration Framework.

Protovis/GWT is based on Protovis 3.2. It currently supports Chrome, Firefox and Safari. IE is not supported (see [http://code.google.com/p/protovis-js/issues/detail?id=15 Protovis Issue 15] for more information). Protovis was patched to allow for 'instanceof' tests across frames, since the GWT scripts are loaded in a iframe.

The current version of Protovis/GWT is an early development version. The goal was to find ways to adapt the Protovis Javascript API for Java/GWT usage. Several [http://web.uvic.ca/~lgrammel/blog/protovis-gwt/index.html Examples] from the Protovis documentation have been re-implemented using Protovis/GWT. The Protovis API has not been fully implemented yet. Especially the support for interaction will probably change.

==Callback Methods==

Javascript supports functions with varying arguments of varying types. This feature is heavily used in Protovis. However, Java (and therefore GWT) does not support flexible functions to the same extent. To address this problem, Protovis/GWT uses function interfaces, e.g. [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.protovis/src/org/thechiselgroup/choosel/protovis/client/jsutil/JsDoubleFunction.java JsDoubleFunction], with a generic [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.protovis/src/org/thechiselgroup/choosel/protovis/client/jsutil/JsArgs.java JsArgs] argument instead. 

These functions can be used in anonymous inner classes. The inner classes can access final variables from the surrounding code, access `this` used in Protovis via `args.getThis()`, and access the argument list via `args.getObject`, `args.getDouble` etc.:
{{{
final PVLinearScale x = ... // final variables can be accessed
// ...
.top(new JsDoubleFunction() {
    public double f(JsArgs args) {
        PVMark _this = args.getThis();
        return y.fd(_this.index());
        // Protovis: y(this.index)
    }
})
// ...
.width(new JsDoubleFunction() {
    public double f(JsArgs args) {
        double d = args.getDouble(); 
        return x.fd(d);
        // Protovis: x(d)
    }
});
// ...
.visible(new JsBooleanFunction() {
    public boolean f(JsArgs args) {
        MyType d = args.getObject(1);
        // ...
    }
});
}}}
Java generics are used to enable the assigning to the expected types when using `args.getThis()` and `args.getObject`. The `args.getObject`-methods (which are available for the different primitive types as well) optionally accept an int parameter that specifies the argument index, e.g. `1` for the second argument. If the argument index is omitted, the argument at index `0` is returned.

While the approach of using anonymous inner methods adds quite a bit of additional text that reduces the readability of the source code compared to the original Protovis code for the same visualization by adding boilerplate code, Protovis/GWT does not provide support for defining anonymous property functions using String literals as in [http://vis.stanford.edu/files/2010-Protovis-InfoVis.pdf Protovis-Java], because the support provided by modern IDEs such as content assist, syntax highlighting, and error checking are not available in String literals.