#summary Protovis/GWT Component
#labels Developer,Component

Protovis/GWT ([http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.protovis/ Source Code], [http://web.uvic.ca/~lgrammel/blog/protovis-gwt/index.html Examples]) is an *open source GWT data visualization module*. It wraps the [http://vis.stanford.edu/protovis/ Protovis] !JavaScript visualization API for usage in GWT. The current version of Protovis/GWT is an early development version based on Protovis 3.2. Several [http://web.uvic.ca/~lgrammel/blog/protovis-gwt/index.html examples] from the [http://vis.stanford.edu/protovis/ex/ Protovis example gallery] have been [http://web.uvic.ca/~lgrammel/blog/protovis-gwt/index.html re-implemented using Protovis/GWT]. The Protovis API has not been fully implemented yet. Especially the support for interaction will probably change. 

Protovis/GWT currently supports *Chrome*, *Firefox* and *Safari*. IE is not supported (see [http://code.google.com/p/protovis-js/issues/detail?id=15 Protovis Issue 15] for more information on Protovis support for IE). 

== Protovis Modifications ==
The Protovis !JavaScript code was patched to allow for `instanceof Array` and `instanceof Date` tests across frames. This was necessary because the GWT scripts are loaded in a iframe, and the !JavaScript script files are loaded in the main page.

==Callback Methods==
Javascript supports functions with varying arguments of varying types. This feature is heavily used in Protovis. However, Java (and therefore GWT) does not support flexible functions to the same extent. To address this problem, Protovis/GWT instead uses function interfaces, e.g. [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.protovis/src/org/thechiselgroup/choosel/protovis/client/jsutil/JsDoubleFunction.java JsDoubleFunction], with a generic [http://code.google.com/p/choosel/source/browse/trunk/org.thechiselgroup.choosel.protovis/src/org/thechiselgroup/choosel/protovis/client/jsutil/JsArgs.java JsArgs] argument. 

Callback methods can defined by implementing these function interfaces in anonymous inner classes. The inner classes can access final variables from the surrounding code, can access `this` used in Protovis via `args.getThis()`, and can access the arguments via `args.getObject`, `args.getDouble` etc.:
{{{
final PVLinearScale x = ... // final variables can be accessed
// ...
.width(new JsDoubleFunction() {
    public double f(JsArgs args) {
        PVMark _this = args.getThis();
        return x.fd(_this.index());
        // Protovis: y(this.index)
    }
})
// ...
.width(new JsDoubleFunction() {
    public double f(JsArgs args) {
        double d = args.getDouble(); 
        return x.fd(d);
        // Protovis: x(d)
    }
});
// ...
.visible(new JsBooleanFunction() {
    public boolean f(JsArgs args) {
        MyType d = args.getObject(1);
        // ...
    }
});
}}}
Java generics enable assigning the return values of `args.getThis()` and `args.getObject` to the expected types. The `args.getObject`-methods (which are available for the different primitive types as well) optionally accept an int parameter that specifies the argument index, e.g. `1` for the second argument. If the argument index is omitted, the argument at index `0` is returned.

Using anonymous inner classes adds boilerplate code that leads to lower readability compared to the original Protovis code. One way to address this problem is by supporting the definition of anonymous property functions using String literals as in [http://vis.stanford.edu/files/2010-Protovis-InfoVis.pdf Protovis-Java]. However, regular Java code has several advantages compared to String literals. Modern IDEs provide content assist, syntax highlighting, refactoring and error checking. The inner classes can also be extracted and unit-tested, if desired. For these reasons, Protovis/GWT uses anonymous inner classes and does not support the definition of anonymous property functions using String literals.